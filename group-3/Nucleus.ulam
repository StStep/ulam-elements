/**
 * Nucleus is a size management element.
 * \color #f29
 * \symbol Nu
 * \symmetries all
 *
 * \author R. Stephens Summerlin
 * \license lgpl
 */
element Nucleus
{
    // Types
    typedef Unsigned(6) ID;
    typedef Unsigned(6) Dist;
    typedef Unsigned(6) Timer;
    typedef EventWindow.SiteNum SiteNum;
    typedef EventWindow.Symmetry Symmetry;
    typedef Cytoplasm.FlipTimeout FlipTimeout;

    // Utilities
    EventWindow ew;

    // Model Parameters
    /** Determines the size */
    parameter Dist maxDist = 8;
    /** Makes nucleus mobile */
    parameter Bool diffuse = false;

    // Data members
    ID id = 1;
    Bool state;
    Timer pulseTimer;

    Void die()
    {
        Empty e;
        ew[0] = e;
    }

    Bool pulse()
    {

        ++pulseTimer;
        Bool ret = (pulseTimer == Timer.maxof);
        if(ret)
        {
            pulseTimer = 0;
            state = !state;
        }

        return ret;
    }

    /**
     * Primary runtime logic
     */
    Void behave()
    {
        Bool flipNeig = pulse();

        // Loop through neighbors
        WindowServices ws;
        ws.reset(1,1);
        Unsigned(3) memNeig = 0;
        Bool swap = false;
        for(Int slot = 1; slot <= 4; ++slot)
        {
            // If Cytoplasm or empty, excite
            Atom a = ew[(SiteNum) slot];
            if((a is Cytoplasm) || (a is Empty))
            {
                Cytoplasm c;
                c.id = id;
                c.dist = maxDist;
                c.flip = flipNeig;
                c.timeout = FlipTimeout.maxof;
                c.state = state;
                ew[(SiteNum) slot] = c;
                if(slot == 1)
                {
                    swap = true;
                }
            }
            // Count surrounding membranes
            else if(a is Membrane)
            {
                ++memNeig;
            }
            // If Nucleus do nothing
            else if(a is Nucleus)
            {
                //Do Nothing
            }
            // Else do nothing if unknown
            else
            {
                // Do nothing
            }
        }

        // Die if surrounded by membrane
        if(memNeig > 3)
        {
            die();
        }
        else if(swap && diffuse)
        {
           ew.swap(0, 1);
        }
        else
        {
            // Do nothing
        }
    }
}

/**
 * Nucleus ID variation enabler
 * \color #2f2
 * \symbol Nu
 * \symmetries normal
 *
 * \author R. Stephens Summerlin
 * \license lgpl
 */
element NucleusB
{
    // Utilities
    EventWindow ew;

    /**
     * Primary runtime logic
     */
    Void behave()
    {
        Nucleus n;
        n.id = 2;
        ew[0] = n;
    }
}

/**
 * Nucleus ID variation enabler
 * \color #ff2
 * \symbol Nu
 * \symmetries normal
 *
 * \author R. Stephens Summerlin
 * \license lgpl
 */
element NucleusC
{
    // Utilities
    EventWindow ew;

    /**
     * Primary runtime logic
     */
    Void behave()
    {
        Nucleus n;
        n.id = 3;
        ew[0] = n;
    }
}
