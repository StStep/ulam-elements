/**
 * Barrier is a shape maintenance element.
 * \color #f66
 * \symbol Ba
 * \symmetries normal
 *
 * \author R. Stephens Summerlin
 *
 * \license lgpl
 *
 */
element Barrier
{

    // Types
    typedef EventWindow.SiteNum SiteNum;

    // Utilities
    EventWindow ew;

    /**
     * Primary runtime logic
     */
    Void behave()
    {
        // Loop through neighbors
        WindowServices ws;
        ws.reset(1,1);
        Unsigned(3) safeNeig = 0;
        Unsigned(3) badNeig = 0;
        for(Int slot = ws.next(); slot >= 0; slot = ws.next())
        {
            // If Medium neigbor, calc max dist for distMap
            Atom a = ew[(SiteNum) slot];
            if((a is Medium) || (a is Barrier))
            {
                ++safeNeig;
            }
            else
            {
                ++badNeig;
            }
        }

        // Disolve if no bad neigbors
        if(badNeig == 0)
        {
            Medium m;
            ew[0] = m;
        }
    }
}
