* Specifications
  General restrictions being followed.

** Element Restrictions
   Note: There are 71 usable bits for element instance members, and 32 bits for quarks.

** Personal Restrictions
   Currently, the event window lookups are restricted to adjacent sites, sites 1 through 4
   as a HW implementation feasibility measure.


* Allocations Types
   The desired requirements for allocation, size management, systems are the following:
   + Containing a space with a specified shape
   + Able to specificy a max allocation
   + Separates between different allocation IDs and from unknown elements
   + Growth of allocated space tries to fill available space
   + Deal gracefully with inconsistencies in shape of available space
   + Kill allocation process if unfeasable

*** Demos
   + [ULAM - Bubble Allocation Demo](https://www.youtube.com/watch?v=diiUx5CkXa4)

** Bubble Allocation
   + Creates a circle of a max radius if given infinite room
   + Allocates using a max radius from a center point
   + Locates the centroid of a space if constrained
   + Standard allocation on display in github repo.

*** Development Process
   The chosen bubble allocation process went through multiple development stages.
   The selection process involved multiple development groups, with *Group 4* being chosen. More details in past commits.

**** DONE Group 1
     CLOSED: [2017-03-26 Sun 17:05]
     Crystalline growth, limited by inconsistencies in available area

**** DONE Group 2
     CLOSED: [2017-03-26 Sun 17:05]
     Initial amorphous growth attempt, unstable

**** DONE Group 3
     CLOSED: [2017-03-26 Sun 17:05]
     Pulsing growth attempt, ran into growth instability, fuse problem

**** DONE Group 4
     CLOSED: [2017-03-26 Sun 17:05]
     Based on group 2, with a logic pass-over to improve stability

*** Future Work
    + [ ] Currently, Cytoplasm based distance measuring means internal non-Cytoplasm elements will alter the overall shape of the allocated space
    + [ ] Nucleus auto-centering works with simple organizations, current isses:
      + Edges of world are preferable to auto-center, going to expect edges to exist for now
      + Nuclei of the same ID clump, making multiple ID Nuclei less effective, and limits ID coverage. Maybe this is okay

*** Elements
    The following elements make up the bubble allocation process.

**** Nucleus
     + This element initiates site allocation, by creating Cytoplasm elements, and setting their dist data member.
     + Has an ID, that is bestowed on Cytoplasm children.
     + The ID is used to separate allocated sites by purpose.
     + Two nuclei of differing ID will not merge, and will stay distinct.
     + Two nuclei of the same ID will share allocated sites.
     + A nucleus will die if it is surrounded by Membrane elements.
     + Nuclei currently attempt to auto-center themselves within spaces, see Future Work for progress concerning this.
     + Parameters:
       + maxDist :: This parameter determines how much space is allocated.

**** Cytoplasm
     + This element serves as the primary mechanism for size management.
     + Keeps track of a distance value, that decrements going outwards from the nucleus, that is used to determine distance.
     + The life-cycle of Cytoplasm is strongly connected to the Membrane life-cycle.

**** Membrane
     + This element represents the boundary of allocated space.
     + This element forms as Cytoplasm elements contact unknown elements, Cytoplasm of a differing ID, or the max allocation range.

** Path Allocation
   + Creates straight path of a given max width and length if given infinite room
   + Goal is the allocation of a path of a minimum width
   + Allocations from an edge outwards using a max width and max length
   + Ideally, will bend to use up available space

*** Development Process
    Below are propossed development directions that this allocation can be accomplished by.

**** TODO Edge Idea
     + Build layer by layer by active edge
     + The edge being built changes from cycle to cycle based on open sites

**** TODO Blow Bubbles Idea
     + Using mutliple bubble allocations
     + The centers of each bubble allocation form the path
     + Could have an arc restriction

**** TODO Grow Noodle From Base Idea
     + Have forward edge handle collision and bending?

*** Future Work
    Not yet implemented

*** Elements
    No elements currently exist for this process.


* Organization Levels
  The following are the requirements for organization:
  + Relative adressing levels
    + Absolute addressing is not possible
  + Perform some kind of lifecycle management
  + Current Levels include:
    1. Organ Layer
    2. Lobe Layer
    3. Leaf Layer

** Heirachical Loop Organization
   This forms the general organization of an organ.
   A hierachical loop, where a central loop has a controlled distribution of contents.
   This distribution is then propogated through adjoining loops, indirectly.

*** Organization Summary

**** Organ
     + Bubble allocation
     + Variables
       + Max Radius
       + Organ ID
         + determine leave/stem IDs

**** Lobes (generic)
     + Path allocation
     + Variables
       + base width
       + max length

**** Leaves
     + Path allocation
     + Variables
       + Base width
       + max length
     + Stem ID
       + Determines filters

*** Notes

**** Organ
     + Heirachical loop top-level
     + Primary address level
     + Has an allocation bubble
     + Basic I/O ports
     + Central kernal/node
       + Connets to lobes and I/O
     + Lobes have width, determines leaf height
       + Coil out into avialable space
       + Fit as many as possible with given width

**** Leaves
     + Grow within lobe wall
     + Circulated through system and embed where there is open space
     + simple loop
     + has base width
     + stem forms center
     + Filters grow from stars
       + perform data processing

*** Growth and Lifecycle

**** Leaf and Lobe Growth
     + Could be similar
     + Has base width
     + Pushes into growth medium
     + Stem path is important part of lobe growth
       + leaves can cross lobe boundaries
     + both could embed and grow?

**** Organ Lifecycle
     1. Organ stem exists
     2. Performs bubble allocation
     3. stem -> kernel
     4. Grows I/O lines
     5. Kernel inserts lobe stems
     6. Kernel inserts leave stems
     7. Open for business
     8. Homeostatis

**** Lobe Lifecycle
     1. Lobe stem exists
     2. embed self in kernel wall
     3. perfrom noodle allocation
     4. Homeostatis

**** Leaf Lifecycle
     1. Leaf stem exists
     2. Embeds self in lobe wall
     3. Performs noodle allocation
     4. Grows filters
     5. Homeostatis

*** Homeostatis

**** Allocation
    + Die if allocation issues found
    + Stem cells in permanent allocation, constant circulation
      + Promotes regrowth of failed leaves and lobes
    + If leave type missing or in short supply, cull population and replace
      + Determine percentage of each
      + Dynamically handle % based on input
        + starving leaves w/constant stem circulation?
    + Dynamic regulation of stems in kernel

**** Circulation
     + Kernel has a circular flow
     + I/O have straight flow

**** Gating
     Gates change adressing levels? Could leaf data only be valid within organs?
     Needing a special conversion to be viable on the organ addressing level?

     + Organ ID based
       + Organ Gate
         + White-list data
       + Kernel Gate
         + WHite list data
     + Leaf ID Based
       + Leaf Gate
         + White-list data
     + Dynamic
       + Lobe Gate
         + Dynamically white-list based on contained leaf IDs

*** IDs

**** Organ IDs
     + Input data
     + Output data
     + Leaf ID distribution
     + Allocation size
     + Lobe width and length

**** Leaf ID
     + Input data
     + Filters -> Output Data
     + Width and Length

*** Development

**** TODO Block out heirarchy

**** TODO Implement Path Allocation


* Unsorted Notes
  A collection of miscellaneous unorganized notes.
