* Specifications

** Element Restrictions
  Note: There are 71 usable bits for element instance members, and 32 bits for quarks.

** Personal Restrictions
  Currently, the event window lookups are restricted to adjacent sites, sites 1 through 4, as a HW implementation feasibility measure.


* Heirachical Loop
  A hierachical loop, where a central loop has a controlled distribution of contents.
  This distribution is then propogated through adjoining loops, indirectly.

** Summary
*** Organ
    + Bubble allocation
    + Variables
      + Max Radius
      + Organ ID
        + determine leave/stem IDs
*** Lobes (generic)
    + Noodle allocation
    + Variables
      + base width
      + max length
*** Leaves
    + Noodle allocation
    + Variables
      + Base width
      + max length
    + Stem ID
      + Determines filters

** Notes
*** Organ
    + Heirachical loop top-level
    + Primary address level
    + Has an allocation bubble
    + Basic I/O ports
    + Central kernal/node
      + Connets to lobes and I/O
    + Lobes have width, determines leaf height
      + Coil out into avialable space
      + Fit as many as possible with given width
*** Leaves
    + Grow within lobe wall
    + Circulated through system and embed where there is open space
    + simple loop
    + has base width
    + stem forms center
    + Filters grow from stars
      + perform data processing
** Growth and Lifecycle
*** Leaf and Lobe Growth
    + Could be similar
    + Has base width
    + Pushes into growth medium
    + Stem path is important part of lobe growth
      + leaves can cross lobe boundaries
    + both could embed and grow?

*** Organ Lifecycle
    1. Organ stem exists
    2. Performs bubble allocation
    3. stem -> kernel
    4. Grows I/O lines
    5. Kernel inserts lobe stems
    6. Kernel inserts leave stems
    7. Open for business
    8. Homeostatis

*** Lobe Lifecycle
    1. Lobe stem exists
    2. embed self in kernel wall
    3. perfrom noodle allocation
    4. Homeostatis

*** Leaf Lifecycle
    1. Leaf stem exists
    2. Embeds self in lobe wall
    3. Performs noodle allocation
    4. Grows filters
    5. Homeostatis

** Homeostatis
*** Allocation
   + Die if allocation issues found
   + Stem cells in permanent allocation, constant circulation
     + Promotes regrowth of failed leaves and lobes
   + If leave type missing or in short supply, cull population and replace
     + Determine percentage of each
     + Dynamically handle % based on input
       + starving leaves w/constant stem circulation?
   + Dynamic regulation of stems in kernel

*** Circulation
    + Kernel has a circular flow
    + I/O have straight flow

*** Gating
    Gates change adressing levels? Could leaf data only be valid within organs?
    Needing a special conversion to be viable on the organ addressing level?

    + Organ ID based
      + Organ Gate
        + White-list data
      + Kernel Gate
        + WHite list data
    + Leaf ID Based
      + Leaf Gate
        + White-list data
    + Dynamic
      + Lobe Gate
        + Dynamically white-list based on contained leaf IDs

** IDs
*** Organ IDs
    + Input data
    + Output data
    + Leaf ID distribution
    + Allocation size
    + Lobe width and length

*** Leaf ID
    + Input data
    + Filters -> Output Data
    + Width and Length


* Allocations Types

** Bubble Allocation
   + Creates a circle if given infinite room
   + Allocates using a max radius from a center point
   + Locates the centroid of a space if constrained
   + Standard allocation on display in github repo.

** Noodle Allocation
   + Creates rectangle if given infinite room
   + Goal is the allocation of a path of a minimum width
   + Allocations from a line outwards using a line width and max length
   + Ideally, will bend to use up available space

*** TODO Edge
    + Build layer by layer by active edge
    + The edge being built changes from cycle to cycle based on open sites

*** TODO Blow Bubbles
    + Using mutliple bubble allocations
    + The centers of each bubble allocation form the path
    + Could have an arc restriction

*** TODO Grow Noodle From Base
    + Have forward edge handle collision and bending?


* Transportation Layers (Organism)
** Active layer
  + Information moved as an element unit
  + Move() - Copy an element and delete source , walking
  + Ingest and Eliminate are special cases, have specified direction (in/out)
  + actively directed, in/out of or toward suitable destination using logic

** Passive Layer
  + Information moved as a density value (solute)
  + Value is represented in a solvent element
  + Value is distributed among adjacent solvent elements using rules of diffusion
  + Dissolve() add to solute density
  + Precipitate() remove from solute density
  + Diffuse() move precipitate among solvent elements, zero-sum
  + Barrier maintain concentration gradients

** Liminal Layer
  + Generally, information that is moved from the passive to active layer or vice versa
  + Secrete() Create a new element, put into active layer
  + Absorb() Remove an element, take out of active layer
  + Usually directly related to passive layer, not necessary
  + conservation of mass/energy is not necessary in this system
  + Digestion is a special case of absorption to secretion. A transformation of an element
  + where calculations/processing takes place

** Elements
  + Agent elements: medium , barrier
  + target element: data


* Solute and Signalling

** Accept Solute
  Produced by elements that accept a specific data-type
  Barriers maintain a concentration gradient, only allows diffusion up to a percentage of the higher side
  This creates nested organs where the each layer has high concentrations, and can be used by
  intermediator barriers to know the direction data should travel, to areas of high acceptance solute

** Self Identification Solute (ID Solute)
  Primary purpose if ID Solute is to know where to put waste, maybe ID Solute will be unnecessary if all elements are accepted somewhere?
  Barriers should be impermeable to self Identification solute, can’t perform pure concentration comparison for ID solute, barrier needs to know what ID it matches with
  Barrier shall know own ID, and will use medium with matching ID to know inside, outside
  If a data is not accepted externally by the barrier, it will eliminate it, making the elimination list a black-list

** Barrier
  + Requires a medium input cell and medium output cell for the barrier to report that it accepts anything
  + Medium should only point to open barriers
  + Barrier reads Medium solutes to determine what it accepts, what is the outside, etc.

** Ideas
  + What if barrier have relative internal distance reported by mediums, as it’s acceptance report, could help getting shortest path through multiple barriers? Don’t know what other say, so will end up being absolute??
  + What about having some weight based on concentration?

* Size Management
  The desired requirements for size management elements are the following:

  1. Allocate space in ratios
  2. Have changing desired ratios change actual ratios
  3. Separation between different allocation IDs
  4. Containing a space
  5. Want max allocation of some kind
  6. Want movement of allocated space to try and fill available space optimally
  7. Separation from unknown
  8. Deal gracefully with inconsistencies in available space

** Demos
  + [ULAM - Space Allocation Demo](https://www.youtube.com/watch?v=diiUx5CkXa4)

** Groups
  The selection process involved multiple development groups, with group 4 being chosen. More details in past commits.
  + Group 1 - Crystalline growth, limited by inconsistencies in available area
  + Group 2 - Initial amorphous growth attempt, unstable
  + Group 3 - Pulsing growth attempt, ran into growth instability, fuse problem
  + Group 4 - Based on group 2, with a logic pass-over to improve stability

** Future Work
  + Currently, Cytoplasm based distance measuring means internal non-Cytoplasm elements will alter the overall shape of the allocated space
  + Nucleus auto-centering works with simple organizations, current isses:
    + Edges of world are preferable to auto-center, going to expect edges to exist for now
    + Nuclei of the same ID clump, making multiple ID Nuclei less effective, and limits ID coverage. Maybe this is okay

** Elements

*** Nucleus
    This element initiates site allocation, by creating Cytoplasm elements, and setting their dist data member.
    Has an ID, that is bestowed on Cytoplasm children.
    The ID is used to separate allocated sites by purpose.
    Two nuclei of differing ID will not merge, and will stay distinct.
    Two nuclei of the same ID will share allocated sites.
    A nucleus will die if it is surrounded by Membrane elements.
    Nuclei currently attempt to auto-center themselves within spaces, see Future Work for progress concerning this.

    Parameters:
      + maxDist :: This parameter determines how much space is allocated.

*** Cytoplasm
    This element serves as the primary mechanism for size management.
    Keeps track of a distance value, that decrements going outwards from the nucleus, that is used to determine distance.
    The life-cycle of Cytoplasm is strongly connected to the Membrane life-cycle.

*** Membrane
    This element represents the boundary of allocated space.
    This element forms as Cytoplasm elements contact unknown elements, Cytoplasm of a differing ID, or the max allocation range.
