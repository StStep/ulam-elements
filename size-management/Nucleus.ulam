/**
 * Nucleus is a size management element.
 * \color #f29
 * \symbol Nu
 * \symmetries normal
 *
 * \author R. Stephens Summerlin
 * \license lgpl
 */
element Nucleus
{
    // Types
    typedef Unsigned(6) ID;
    typedef Unsigned(6) Dist;
    typedef EventWindow.SiteNum SiteNum;
    typedef EventWindow.Symmetry Symmetry;

    // Utilities
    EventWindow ew;

    // Model Parameters
    /** Determines the size */
    parameter Dist maxDist = 16;
    /** Determines the cycles to be stable */
    parameter Unsigned(6) stableMinCycle = 30;

    // Data members
    ID id = 1;
    Bool stable;
    Unsigned(6) stabCount;

    /**
     * Hard-coded color options for debugging with
     */
    ARGB getColor(Unsigned selector)
    {
        ColorUtils cu;
        ARGB ret;
        if(stable)
        {
            ret = cu.color(0xFF,0x50,0xFF);
        }
        else // unstable
        {
            ret = cu.color(0xFF,2,0x50);
        }

        return ret;
    }

    Void bloom()
    {
        Font f;
        ew[0] = f;
    }

    Void die()
    {
        Empty e;
        ew[0] = e;
    }

    Void spread(SiteNum site)
    {
        Cytoplasm c;
        c.id = id;
        c.dist = maxDist;
        ew[site] = c;
    }

    Void excite(SiteNum site, Cytoplasm c)
    {
        if(stable)
        {
            c.bloom = true;
            ew[site] = c;
        }
        else
        {
            c.id = id;
            c.dist = maxDist;
            ew[site] = c;
        }
    }

    /**
     * Primary runtime logic
     */
    Void behave()
    {
        // Loop through neighbors
        Unsigned(3) memNeig = 0;
        Dist room[4];
        Bool safe[4];
        for(SiteNum site = 1; site <= 4; ++site)
        {
            // If Empty or Medium, spread
            Atom a = ew[site];
            if((a is Empty) || (a is Medium))
            {
                spread(site);
            }
            // If cytoplasm, excite
            else if(a is Cytoplasm)
            {
                safe[site - 1] = true;
                Cytoplasm c = (Cytoplasm) a;
                excite(site, c);
                if(site == 1)
                {
                    room[3] = c.room[3];
                }
                else if(site == 2)
                {
                    room[2] = c.room[2];
                }
                else if(site == 3)
                {
                    room[1] = c.room[1];
                }
                // Site == 4
                else
                {
                    room[0] = c.room[0];
                }
            }
            // Count surrounding membranes
            else if(a is Membrane)
            {
                ++memNeig;
            }
            // Die if foriegn nuclei
            else if(a is Nucleus)
            {
                Nucleus n = (Nucleus) a;
                if(n.id != id)
                {
                    die();
                }
            }
            // Else die if unknown
            else
            {
               die();
            }
        }

        // Die if surrounded by membrane
        if(memNeig > 3)
        {
            die();
        }

        // Move to optimize room
        Int udDisp = ((Int) room[2]) - ((Int) room[1]);
        Int lrDisp = ((Int) room[3]) - ((Int) room[0]);

        Dist udAbs;
        if(udDisp < 0)
        {
            udAbs = (Dist) -udDisp;
        }
        else
        {
            udAbs = (Dist) udDisp;
        }

        Dist lrAbs;
        if(lrDisp < 0)
        {
            lrAbs =  (Dist) -lrDisp;
        }
        else
        {
            lrAbs = (Dist) lrDisp;
        }

        Bool isLarge = (udAbs > 2) || (lrAbs > 2);

        // Move left/right
        if(isLarge && (udAbs < lrAbs))
        {
            // Move right
            if(lrDisp > 0)
            {
                if(safe[3])
                    ew.swap(0, 4);

            }
            // Move left
            else
            {
                if(safe[0])
                    ew.swap(0, 1);
            }
            --stabCount;
        }
        // Move up/down
        else if(isLarge)
        {
            // Move Down
            if(udDisp > 0)
            {
                if(safe[2])
                    ew.swap(0, 3);
            }
            // Move Up
            else
            {
                if(safe[1])
                    ew.swap(0, 2);
            }
            --stabCount;
        }
        // Count stable cycles
        else
        {
            if(stabCount > stableMinCycle)
            {
                stable = true;
            }
            else
            {
                ++stabCount;
            }
        }

        if(stable)
        {
            bloom();
        }
    }
}

/**
 * Nucleus ID variation enabler
 * \color #2f2
 * \symbol Nu
 * \symmetries normal
 *
 * \author R. Stephens Summerlin
 * \license lgpl
 */
element NucleusB
{
    // Utilities
    EventWindow ew;

    /**
     * Primary runtime logic
     */
    Void behave()
    {
        Nucleus n;
        n.id = 2;
        ew[0] = n;
    }
}

/**
 * Nucleus ID variation enabler
 * \color #ff2
 * \symbol Nu
 * \symmetries normal
 *
 * \author R. Stephens Summerlin
 * \license lgpl
 */
element NucleusC
{
    // Utilities
    EventWindow ew;

    /**
     * Primary runtime logic
     */
    Void behave()
    {
        Nucleus n;
        n.id = 3;
        ew[0] = n;
    }
}
