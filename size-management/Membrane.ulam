/**
 * Membrane is a size management element.
 * \color #900
 * \symbol Me
 * \symmetries normal
 *
 * \author R. Stephens Summerlin
 *
 * \license lgpl
 *
 */
element Membrane
{

    // Types
    typedef Nucleus.ID ID;
    typedef Nucleus.Inst Inst;
    typedef Nucleus.Dist Dist;
    typedef EventWindow.SiteNum SiteNum;

    // Utilities
    EventWindow ew;

    // Model Parameters
    /** The upper thresh for a weak neighbor */
    parameter Dist weakLim = 2;
    /** The cyto dist diff needed for movement */
    parameter Dist conFlex = 2;

    // Data members
    Bool trans = false;
    CMap instMap; // 30 bits

    /**
     * Hard-coded color options for debugging with
     * trans and not trans
     */
    ARGB getColor(Unsigned selector)
    {
        ColorUtils cu;
        ARGB ret;
        if(trans)
        {
            ret = cu.color(0xA0,0xA0,0);
        }
        else
        {
            ret = cu.color(0xFF,0,0);
        }

        return ret;
    }

    Void die()
    {
        Empty e;
        ew[0] = e;
    }

    Void dissolve(ID nId, Inst iId)
    {
        Cytoplasm c;
        c.nId = nId;
        c.iId = iId;
        c.dist = 0;
        c.instMap.empty();
        ew[0] = c;
    }

    /**
     * Primary runtime logic
     */
    Void behave()
    {
        // Loop through neighbors
        Bool goodNeig = false;
        Bool iTrans = false;
        Bool unfriendlyContention = false;
        Bool contention = false;
        Bool unknown = false;
        Bool weakFriend = false;
        Bool neutral = false;
        ID lastId = 0;
        Inst lastiId = 0;
        Dist minDist = Dist.maxof;
        SiteNum minLoc = 0;
        Dist maxDist = Dist.minof;
        Unsigned(3) goodCnt = 0;
        CMap tmpMap; // 30 bits
        tmpMap.setTo(instMap);
        for(SiteNum site = 1; site <= 4; ++site)
        {
            Atom a = ew[site];

            // Check for weak neighbors and contention
            if(a is Cytoplasm)
            {
                Cytoplasm neig = (Cytoplasm) a;
                goodNeig = true;
                ++goodCnt;

                // Check for weak cyto neig
                if(neig.dist <= weakLim)
                {
                    weakFriend = true;
                }

                // Check for contention
                if(lastId == 0)
                {
                    lastId = neig.nId;
                    lastiId = neig.iId;
                    tmpMap.setMax(neig.instMap);
                }
                else if(lastId != neig.nId)
                {
                    contention = true;
                    unfriendlyContention = true;
                }
                else if(lastiId != neig.iId)
                {
                    iTrans = true;
                    contention = true;
                    tmpMap.setMax(neig.instMap);
                }
                else
                {
                    // Do nothing
                }

                // Determine moveDir, for contention
                if(neig.dist < minDist)
                {
                    minDist = neig.dist;
                    minLoc = site;
                }

                // Determine moveDir, for contention
                if(neig.dist > maxDist)
                {
                    maxDist = neig.dist;
                }
            }
            else if((a is Empty) || (a is Medium))
            {
                // Do nothing
                neutral = true;
            }
            else if(a is Membrane)
            {
                // Do nothing
            }
            else if(a is Nucleus)
            {
                // Do nothing
            }
            else
            {
                unknown = true;
            }
        }

        trans = false;
        // Die if no cyto
        if(!goodNeig)
        {
            die();
            return;
        }
        // Else if unknown stay
        else if(unknown)
        {
            // Stay put
        }
        // Else if, contention might move
        else if(contention)
        {
            Dist distDiff = (Dist) (maxDist - minDist);
            if(distDiff <= conFlex)
            {
                // Do nothing
            }
            else
            {
                ew[minLoc] = self;
                die();
                return;
            }

            if(!unfriendlyContention)
            {
                trans = iTrans;
            }
        }
        // Else dissolve if all strong friends and no nuetral or surrounded by friends
        else if(!neutral || !weakFriend || (goodCnt >= 3))
        {
            dissolve(lastId, lastiId);
            return;
        }
        else
        {
            // Do nothing
        }

        if(trans)
        {
            tmpMap.modify(-1);
        }
        else
        {
            tmpMap.empty();
        }
        instMap.setTo(tmpMap);
    }
}
