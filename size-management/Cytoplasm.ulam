/**
 * A cytoplasm map  Space cost: 30 bits
 * \sa MapT
 */
quark CMap : MapT(4, 6, 3) {
    typedef MapT(4, 6, 3).Key Key;
    typedef MapT(4, 6, 3).Value Value;
}


/**
 * Cytoplasm is a size management element
 * \color #22f
 * \symbol Cy
 * \symmetries normal
 *
 * \author R. Stephens Summerlin
 *
 * \license lgpl
 *
 */

element Cytoplasm {
    // Types
    typedef Nucleus.ID ID;
    typedef Nucleus.Inst Inst;
    typedef Nucleus.Dist Dist;
    typedef EventWindow.SiteNum SiteNum;
    typedef EventWindow.Symmetry Symmetry;
    typedef SiteVisitorByType.ElementType ElementType;
    typedef WindowScanner.Category Category;

    // Utilities
    EventWindow ew;
    AtomUtils au;

    // Model Parameters
    /** The weak thresh, no spreading */
    parameter Dist weakLim = 3;
    /** The dist thresh where cyto dies, 0 disables */
    parameter Dist deadLim = 1;

    // Data members (Using 70 of 71 bits)
    ID nId; // 6 bits
    Inst iId; // 4 bits
    Dist dist; // The distance from the nucleus, 6 bits
    Dist room; // 6 bits
    CMap instMap; // 30 bits

    /**
     * Hard-coded color options for debugging with
     * ID 1, 2, and 3
     */
    ARGB getColor(Unsigned selector) {
        ColorUtils cu;
        ARGB ret;
        if(nId == 1) {
            ret = cu.color(2,2,0xFF);
        }
        else if(nId == 2) {
            ret = cu.color(2,0x60,0xFF);
        }
        else if(nId == 3) {
            ret = cu.color(0x30,2,0xFF);
        }
        else { // dead
            ret = cu.color(2,2,2);
        }

        return ret;
    }

    Void harden() {
        Membrane m;
        m.instMap.empty();
        ew[0] = m;
    }

    Void hardenOut(SiteNum site) {
        Membrane m;
        m.instMap.empty();
        ew[site] = m;
    }

    Void die() {
        Empty e;
        ew[0] = e;
    }

    Void spread(SiteNum site) {
        Cytoplasm c;
        c.nId = nId;
        c.iId = iId;
        c.dist = (Dist) (dist - 1);
        c.instMap.setTo(instMap);
        c.instMap.modify(-1);
        ew[site] = c;
    }

    /**
     * Primary runtime logic
     */
    Void behave() {
        WindowScanner ws;
        SiteVisitorByType sv; // TODO Make cyto focused class, can do more with it, less boilerplate
        Empty e;
        Cytoplasm c;
        Nucleus n;
        Membrane m;
        Medium me;
        Wall w;

        typedef WindowScanner.Category Category;
        constant Category emptySI = 0;    // scan index for empties
        constant Category cytoSI = 1;   // scan index for cytoplasm
        constant Category mediumSI = 2;   // scan index for medium
        constant Category membraneSI = 3;   // scan index for membrane
        constant Category nucleusSI = 4;   // scan index for nucleus
        constant Category nonempSI = 5;     // scan index for non-empty unknowns

        ElementType emptyT = (ElementType) au.getType((Atom) e);
        ElementType cytoT = (ElementType) au.getType((Atom) c);
        ElementType mediumT = (ElementType) au.getType((Atom) me);
        ElementType membraneT = (ElementType) au.getType((Atom) m);
        ElementType nucleusT = (ElementType) au.getType((Atom) n);
        ElementType nonempT = (ElementType) au.getType((Atom) w); // TODO Add support for unknowns

        sv.reset();
        sv.setType(emptySI, emptyT);
        ws.allocateCategory(); // TODO Put this in sv
        sv.setType(cytoSI, cytoT);
        ws.allocateCategory(); // TODO Put this in sv
        sv.setType(mediumSI, mediumT);
        ws.allocateCategory(); // TODO Put this in sv
        sv.setType(membraneSI, membraneT);
        ws.allocateCategory(); // TODO Put this in sv
        sv.setType(nucleusSI, nucleusT);
        ws.allocateCategory(); // TODO Put this in sv
        sv.setType(nonempSI, nonempT);
        ws.allocateCategory(); // TODO Put this in sv

        ws.scan(sv, 1, 1);

        // Setup temp map
        Dist maxDist = dist;
        CMap tmpMap;
        SiteNum site;
        tmpMap.setTo(instMap);

        // If friendly Cyto calc maxDist else harden
        if((Unsigned) 0 != ws.getHits(cytoSI)) {
            site = ws.getSiteNum(cytoSI);
            Cytoplasm c = (Cytoplasm) ew[site];
            if((c.nId != nId) || (c.iId != iId)) {
                harden();
                return;
            }
            else {
                tmpMap.setMax(c.instMap);

                if(c.dist > maxDist) {
                    maxDist = c.dist;
                }

                if(c.room > room) {
                    room = c.room;
                }
            }
        }

        // If Membrane set room and check instMap if trans
        if((Unsigned) 0 != ws.getHits(membraneSI)) {
            room = Dist.maxof;
            site = ws.getSiteNum(membraneSI);
            Membrane m = (Membrane) ew[site];
            if(m.trans) {
                tmpMap.setMax(m.instMap);
            }
        }

        // If Nucleus, check IDs to see if harden
        if((Unsigned) 0 != ws.getHits(nucleusSI)) {
            site = ws.getSiteNum(nucleusSI);
            Nucleus n = (Nucleus) ew[site];
            if((n.nId != nId) || (n.iId != iId)) {
                harden();
                return;
            }
        }

        // If empty or medium, spread TODO add medium detection
        if((Unsigned) 0 != ws.getHits(emptySI)) {
            site = ws.getSiteNum(emptySI);
            if(dist > weakLim) {
                spread(site);
            }
            else {
                hardenOut(site);
            }
        }

        // Harden if unknown
        if((Unsigned) 0 != ws.getHits(nonempSI)) {
            harden();
            return;
        }

        // Decay and set
        tmpMap.modify(-1);
        --maxDist;
        --room;

        // Die when dist less than death lim
        if(maxDist < deadLim) {
            die();
            return;
        }
        else {
            dist = maxDist;
            instMap.setTo(tmpMap);
        }

    }
}
