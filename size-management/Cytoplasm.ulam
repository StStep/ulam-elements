/**
 * Cytoplasm is a size management element
 * \color #22f
 * \symbol Cy
 * \symmetries normal
 *
 * \author R. Stephens Summerlin
 *
 * \license lgpl
 *
 */

element Cytoplasm
{
    // Types
    typedef Nucleus.ID ID;
    typedef Nucleus.Dist Dist;
    typedef EventWindow.SiteNum SiteNum;

    // Utilities
    EventWindow ew;

    // Model Parameters
    /** The weak thresh, no spreading */
    parameter Dist weakLim = 3;
    /** The dist thresh where cyto dies, 0 disables */
    parameter Dist deadLim = 1;

    // Data members
    ID id;
    Dist dist; // The distance from the nucleas
    Dist room[4];

    /**
     * Hard-coded color options for debugging with
     * ID 1, 2, and 3
     */
    ARGB getColor(Unsigned selector)
    {
        ColorUtils cu;
        ARGB ret;
        if(id == 1)
        {
            ret = cu.color(2,2,0xFF);
        }
        else if(id == 2)
        {
            ret = cu.color(2,0x60,0xFF);
        }
        else if(id == 3)
        {
            ret = cu.color(0x30,2,0xFF);
        }
        else // dead
        {
            ret = cu.color(2,2,2);
        }

        return ret;
    }

    Void harden()
    {
        Membrane m;
        ew[0] = m;
    }

    Void hardenOut(SiteNum site)
    {
        Membrane m;
        ew[site] = m;
    }

    Void die()
    {
        Empty e;
        ew[0] = e;
    }

    Void spread(SiteNum site)
    {
        Cytoplasm c;
        c.id = id;
        c.dist = (Dist) (dist - 1);
        ew[site] = c;
    }

    /**
     * Primary runtime logic
     */
    Void behave()
    {
        // Setup temp map
        Dist maxDist = dist;

        // Loop through neighbors
        for(SiteNum site = 1; site <= 4; ++site)
        {
            Atom a = ew[site];

            // If friendly Cyto neigbor, calc maxDist dist, otherwise membrane
            if(a is Cytoplasm)
            {
                Cytoplasm neig = (Cytoplasm) a;
                if(neig.id != id)
                {
                    harden();
                }
                else
                {
                    if(neig.dist > maxDist)
                    {
                        maxDist = neig.dist;
                    }

                    if(site == 1)
                    {
                        if(neig.room[3] > room[3])
                            room[3] = neig.room[3];
                    }
                    else if(site == 2)
                    {
                        if(neig.room[2] > room[2])
                            room[2] = neig.room[2];
                    }
                    else if(site == 3)
                    {
                        if(neig.room[1] > room[1])
                            room[1] = neig.room[1];
                    }
                    // Site == 4
                    else
                    {
                        if(neig.room[0] > room[0])
                            room[0] = neig.room[0];
                    }
                }
            }
            // If empty or Medium and not on distance edge, make cyto
            else if((a is Empty) || (a is Medium))
            {
                if(dist > weakLim)
                {
                    spread(site);
                }
                else
                {
                    hardenOut(site);
                }
            }
            // If membrane, calc room
            else if(a is Membrane)
            {
                if(site == 1)
                {
                    room[3] = Dist.maxof;
                }
                else if(site == 2)
                {
                    room[2] = Dist.maxof;
                }
                else if(site == 3)
                {
                    room[1] = Dist.maxof;
                }
                // Site == 4
                else
                {
                    room[0] = Dist.maxof;
                }
            }
            else if(a is Nucleus)
            {
                Nucleus neig = (Nucleus) a;
                if(neig.id != id)
                {
                    harden();
                }
            }
            // Else become membrane if unknown
            else
            {
                harden();
            }
        }

        // Decay and set
        --maxDist;
        for(Int i = 0; i < 4; ++i)
        {
            --room[i];
        }

        // Die when dist less than death lim
        if(maxDist < deadLim)
        {
            die();
        }
        else
        {
            dist = maxDist;
        }

    }
}
