/**
 * An associated array, implemented as two static arrays.
 * Space cost = n * (k + v), where n is max number of
 * simultaneous entries, k is the number of bits for the key
 * and v is the number of bits for the value. Quark max size is 32.
 *
 * The map is sorted such that all valid entries are at the
 * beginning of the arrays. Once the first invalid key, key == 0,
 * is found, all further keys will be invalid.
 *
 * \author R. Stephens Summerlin
 * \license lgpl
 */
quark MapT(Unsigned k, Unsigned v, Unsigned n)
{
    // Types
    typedef Unsigned(k) Key;
    typedef Unsigned(v) Value;
    typedef Key Keys[n];
    typedef Value Vals[n];

    // Data members
    Keys mKeys;
    Vals mVals;

    /**
     * Add key-value pair to map, using one of the following, in order:
     *  (1) If key already exists, update it
     *  (2) If not the map is not full, add a new key
     *  (3) If full, replace the smallest key-value it is larger than, if any
     */
    Void add(Key key, Value val)
    {
        Int index = -1;
        Value lVal = val;
        for(Int i = 0; i < n; ++i)
        {
            // If sentinal, break
            if(mKeys[i] == 0)
            {
                index = i;
                break;
            }
            // Else if match, set index and break
            else if(mKeys[i] == key)
            {
                index = i;
                break;
            }
            // Else non-matching key
            else
            {
                if(mVals[i] < lVal)
                {
                    index = i;
                    lVal = mVals[i];
                }
            }
        }

        // If index found
        if(index >= 0)
        {
            mKeys[index] = key;
            mVals[index] = val;
        }
        // Else Full, and no smaller entry to replace
        else
        {
            // Do nothing
        }
    }

    /**
     * Get the index for a given key, a value of -1 is returned when no key is found
     */
    Int get(Key key)
    {
        Int ret = -1;
        for(Int i = 0; i < n; ++i)
        {
            // If sentinal, break
            if(mKeys[i] == 0)
            {
                break;
            }
            // Else if match, set index and break
            else if(mKeys[i] == key)
            {
                ret = i;
                break;
            }
            // Else not-match
            {
                // Do nothing
            }
        }

        return ret;
    }

    /**
     * Remove a given key from the map if it exists
     */
    Void remove(Key key)
    {
        Key tmpK = 0;
        Value tmpV = 0;
        Int rmInd = -1;
        Int mvInd = -1;
        for(Int i = 0; i < n; ++i)
        {
            // If after match
            if(rmInd >= 0)
            {
                // If hit sentry, break
                if(mKeys[i] == 0)
                    break;
                tmpK = mKeys[i];
                tmpV = mVals[i];
                mvInd = i;
            }
            // Else If match found, set rm
            else if(key == mKeys[i])
            {
                rmInd = i;
            }
            // Else before match
            else
            {
                // Do nothing
            }
        }

        // If found tailing entry, move into rmInd
        if(mvInd > 0)
        {
            mKeys[rmInd] = tmpK;
            mVals[rmInd] = tmpV;
            mKeys[mvInd] = 0;
        }
        // Else if no tailing entry, but match
        else if(rmInd >= 0)
        {
            mKeys[rmInd] = 0;
        }
        // Else no match
        {
            // Do nothing
        }
    }

    /**
     * This function adds the given /a mod to
     * each Map entry.
     */
    Void modify(Int mod)
    {
        for(Int i = 0; i < n; ++i)
        {
            // If sentinal, break
            if(mKeys[i] == 0)
            {
                break;
            }
            // Else, mod value
            else
            {
                mVals[i] = (Value) (mVals[i] + mod);
            }
        }
    }

    /**
     * This function takes the min value for each key from either itself
     * or the given parameter \a compMap. New keys from \a compMap
     * are not added, because not having key is considered having a
     * smaller value.
     */
    Void setMin(MapT(k, v, n) compMap)
    {
        for(Int i = 0; i < n; ++i)
        {
            Key oldK = mKeys[i];
            // If sentinal, break
            if(oldK == 0)
                break;
            Value oldV = mVals[i];
            Int newInd = compMap.get(oldK);

            // If exists, only update if smaller
            if((newInd >= 0) && (compMap.mVals[newInd] < oldV))
            {
                mVals[i] = compMap.mVals[newInd];
            }
            // Else doesn't exists, or old is smaller
            else
            {
                // Do nothing
            }
        }
    }

    /**
     * This function takes the max value for each key from either itself
     * or the given parameter \a compMap. New keys from \a compMap
     * are added.
     */
    Void setMax(MapT(k, v, n) compMap)
    {
        for(Int i = 0; i < n; ++i)
        {
            Key newK = compMap.mKeys[i];
            // If sentinal, break
            if(newK == 0)
                break;
            Value newV = compMap.mVals[i];
            Int oldInd = get(newK);

            // If new, add
            if(oldInd < 0)
            {
                add(newK, newV);
            }
            // If exists, only update if bigger
            else if(newV > mVals[oldInd])
            {
                mVals[oldInd] = newV;
            }
            // Else it exists, but new is smaller
            else
            {
                // Do nothing
            }
        }
    }

    /**
     * This function empties the map by setting all keys to zero.
     */
    Void empty()
    {
        for(Int i = 0; i < n; ++i)
        {
            mKeys[i] = (Key) 0;
            mVals[i] = (Value) 0;
        }
    }

    /**
     * This function makes the map the copy of another map.
     */
    Void setTo(MapT(k, v, n) compMap)
    {
        empty();
        for(Int i = 0; i < n; ++i)
        {
            Key newK = compMap.mKeys[i];
            // If sentinal, break
            if(newK == 0)
                break;
            Value newV = compMap.mVals[i];
            add(newK, newV);
        }
    }
}

/**
 * A general-purpose map  Space cost: 30 bits
 * \sa MapT
 */
quark Map : MapT(3, 7, 3)
{
    typedef MapT(3, 7, 3).Key Key;
    typedef MapT(3, 7, 3).Value Value;
}
