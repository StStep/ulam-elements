/**
 * Molt is a size management element.
 * \color #f22
 * \symbol Mo
 * \symmetries normal
 *
 * \author R. Stephens Summerlin
 *
 * \license lgpl
 *
 */

element Molt
{
    // Types
    typedef EventWindow.SiteNum SiteNum;
    typedef Unsigned(2) State;
    typedef Unsigned(16) Gen;

    // Utilities
    EventWindow ew;

    // Constants
    constant State inactive = 0;
    constant State active = 1;
    constant State dead = 3;
    constant Gen maxGen = 20;

    // Data members
    State state;
    Gen curGen;

    Molt propogate()
    {
        Molt m = self;
        ++m.curGen;
        return m;
    }

    /**
     * Primary runtime logic
     */
    Void behave()
    {
        // Loop through neighbors
        WindowServices ws;
        ws.reset(1,1);
        for(Int slot = ws.next(); slot >= 0; slot = ws.next())
        {
            Atom a = ew[(SiteNum) slot];
            // If Empty, propogate
            if(a is Empty)
            {
                if(curGen < maxGen)
                {
                    ew[(SiteNum) slot] = propogate();
                }
            }
            // Else
            else
            {
                // Do nothing
            }
        }
    }
}
