
/**
 * The child of Molt
 * \color #f22
 * \symbol Mo
 * \symmetries normal
 *
 * \author R. Stephens Summerlin
 * \license lgpl
 */
element MoltChild
{
    // Types
    typedef EventWindow.SiteNum SiteNum;
    typedef EventWindow.Symmetry Symmetry;
    typedef Unsigned(2) State;
    typedef Unsigned(6) Gen;
    typedef Unsigned(8) AGRB[4];

    // Utilities
    EventWindow ew;

    // Constants
    constant State inactive = 0;
    constant State active = 1;
    constant State dead = 2;
    constant State ascend = 3;
    constant SiteNum upperPeer = 7;
    constant SiteNum lowerPeer = 6;
    constant SiteNum lowerCardinalPeer = 8;
    constant SiteNum upperChild = 2;
    constant SiteNum lowerChild = 1;

    // Model Parameters
    /**
     * Determines the size
     */
    parameter Gen maxGen = 8;

    // Data members
    State state;
    Bool isCardinal;
    Gen curGen;
    Symmetry sym;

    /**
     * Used to determine the display color
     */
    ARGB getColor(Unsigned selector)
    {
        ColorUtils cu;
        ARGB ret;
        if(state == inactive)
        {
            ret = cu.color(0x8F,2,2);
        }
        else if(state == active)
        {
            ret = cu.color(0xFF,2,2);
        }
        else if(state == ascend)
        {
            ret = cu.color(0x30,0x70,2);
        }
        else // dead
        {
            ret = cu.color(0x1F,2,2);
        }

        return ret;
    }

    /**
     * Handle inactive state.
     *
     * Do nothing until no upper and lower molt neighbors exist
     */
    State tInactive()
    {
        Bool alone = false;
        SiteNum lower = lowerPeer;
        if(isCardinal)
            lower = lowerCardinalPeer;

        Atom a_u = ew[upperPeer];
        Atom a_l = ew[lower];
        if((a_u is Empty) || (a_l is Empty))
        {
            alone = true;
        }

        if(alone)
            return inactive;
        else
            return active;
    }

    /**
     * Handle active state.
     *
     * Copy self into each child space and then die
     */
    State tActive()
    {
        if(curGen >= maxGen)
        {
            return ascend;
        }

        MoltChild m;
        m.curGen = (Gen) (curGen + 1);
        m.sym = sym;
        Bool willAscend = false;

        Atom a_u = ew[upperChild];
        if(a_u is Empty)
        {
            ew[upperChild] = m;
        }
        else if((a_u is MoltChild) || (a_u is Medium) || (a_u is Barrier))
        {
            // Do nothing
        }
        else
        {
            willAscend = true;
        }

        Atom a_l = ew[lowerChild];
        if(a_l is Empty)
        {
            m.isCardinal = isCardinal;
            ew[lowerChild] = m;
        }
        else if((a_l is MoltChild) || (a_l is Medium) || (a_l is Barrier))
        {
            // Do nothing
        }
        else
        {
            willAscend = true;
        }

        if(willAscend)
        {
            return ascend;
        }
        else
        {
            return dead;
        }
    }

    /**
     * Handle dead state.
     *
     * Be become Empty once children are dead
     */
    State tDead()
    {
        return dead;
    }

    /**
     * Handle ascend state.
     *
     * Ascend into a barrier.
     */
    State tAscend()
    {
        Barrier b;
        ew[0] = b;
        return ascend;
    }

    /**
     * Primary runtime logic
     */
    Void behave()
    {
        ew.changeSymmetry(sym);

        // Loop through neighbors
        State next = state;
        if(state == inactive)
        {
            next = tInactive();
        }
        else if(state == active)
        {
            next = tActive();
        }
        else if(state == ascend)
        {
            next = tAscend();
        }
        // Else dead
        else
        {
            next = tDead();
        }
        state = next;
    }
}

/**
 * Molt is a size management element.
 * \color #f22
 * \symbol Mo
 * \symmetries normal
 *
 * \author R. Stephens Summerlin
 *
 * \license lgpl
 *
 */
element Molt
{

    // Types
    typedef EventWindow.SiteNum SiteNum;
    typedef EventWindow.Symmetry Symmetry;

    // Constants
    constant SiteNum leftChild = 1;
    constant SiteNum upperChild = 2;
    constant SiteNum rightChild = 4;
    constant SiteNum lowerChild = 3;

    // Utilities
    EventWindow ew;

    // Data members
    Once oc;

    /**
     * The logic that creates the inital molt
     * chidlren.
     */
    Void propogate()
    {
        MoltChild m;
        m.isCardinal = true;
        m.curGen = 1;

        // Left Dir
        m.sym = 0;
        ew[leftChild] = m;

        // Upper Dir
        m.sym = 1;
        ew[upperChild] = m;

        // Right Dir
        m.sym = 2;
        ew[rightChild] = m;

        // Lower Dir
        m.sym = 3;
        ew[lowerChild] = m;
    }

    /**
     * Primary runtime logic
     */
    Void behave()
    {
        if(oc.new())
        {
            propogate();
        }
        Medium m;
        ew[0] = m;
    }
}
