/**
 * Membrane is a size management element.
 * \color #900
 * \symbol Me
 * \symmetries normal
 *
 * \author R. Stephens Summerlin
 *
 * \license lgpl
 *
 */
element Membrane
{

    // Types
    typedef Nucleus.ID ID;
    typedef Nucleus.Dist Dist;
    typedef EventWindow.SiteNum SiteNum;

    // Utilities
    EventWindow ew;

    // Model Parameters

    // Data members

    Void die()
    {
        Empty e;
        ew[0] = e;
    }

    Void dissolve(ID id)
    {
        Cytoplasm c;
        c.id = id;
        c.dist = 0;
        ew[0] = c;
    }

    /**
     * Primary runtime logic
     */
    Void behave()
    {
        // Loop through neighbors
        Bool badNeig = false;
        Bool goodNeig = false;
        ID lastId = 0;
        SiteNum moveLoc = 0;
        Dist minDist = Dist.maxof;
        for(Int slot = 1; slot <= 4; ++slot)
        {
            Atom a = ew[(SiteNum) slot];

            // Check for unfriendly neighbors
            if(a is Cytoplasm)
            {
                Cytoplasm neig = (Cytoplasm) a;

                if(neig.dist < minDist)
                {
                    minDist = neig.dist;
                    moveLoc = (Dist) slot;
                }
                else if(neig.dist == minDist)
                {
                    moveLoc = (Dist) 0; // Stable if matching sides
                }
                else
                {
                    // Do nothing
                }

                // First neig with ID
                if(lastId == 0)
                {
                    lastId = neig.id;
                    goodNeig = true;
                }
                else if(lastId != neig.id)
                {
                    badNeig = true;
                }
                else
                {
                    goodNeig = true;
                }
            }
            else if(a is Empty)
            {
                // Do nothing
            }
            else if(a is Membrane)
            {
                // Do nothing
            }
            else if(a is Nucleus)
            {
                Nucleus neig = (Nucleus) a;
                // First neig with ID
                if(lastId == 0)
                {
                    lastId = neig.id;
                    goodNeig = true;
                }
                else if(lastId != neig.id)
                {
                    badNeig = true;
                }
                else
                {
                    goodNeig = true;
                }
            }
            else
            {
                badNeig = true;
            }
        }

        // Die if no friends
        if(!goodNeig)
        {
            die();
        }
        // Else disolve if no bad neigbors
        else if(!badNeig)
        {
            dissolve(lastId);
        }
        else if(moveLoc != 0)
        {
            ew[moveLoc] = self;
        }
        else
        {
            // Do nothing
        }
    }
}
