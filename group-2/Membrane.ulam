/**
 * Membrane is a size management element.
 * \color #900
 * \symbol Me
 * \symmetries normal
 *
 * \author R. Stephens Summerlin
 *
 * \license lgpl
 *
 */
element Membrane
{

    // Types
    typedef Nucleus.ID ID;
    typedef Nucleus.Dist Dist;
    typedef EventWindow.SiteNum SiteNum;

    // Utilities
    EventWindow ew;

    // Data members
    ID id;

    /**
     * Primary runtime logic
     */
    Void behave()
    {
        // Loop through neighbors
        WindowServices ws;
        ws.reset(1,1);
        Bool badNeig = false;
        Bool goodNeig = false;
        for(Int slot = ws.next(); slot >= 0; slot = ws.next())
        {
            Atom a = ew[(SiteNum) slot];

            // Count unfriendly neigbors
            if(a is Cytoplasm)
            {
                Cytoplasm neig = (Cytoplasm) a;
                if(neig.id != id)
                {
                    badNeig = true;
                }
                else
                {
                    goodNeig = true;
                }
            }
            else if(a is Empty)
            {
                // Hmm TODO
            }
            else if(a is Membrane)
            {
                Membrane neig = (Membrane) a;
                if(neig.id != id)
                {
                    badNeig = true;
                }
            }
            else
            {
                badNeig = true;
            }
        }

        // Die if no friends
        if(!goodNeig)
        {
            Empty e;
            ew[0] = e;
        }
        // Else disolve if no bad neigbors
        else if(!badNeig)
        {
            Cytoplasm c;
            c.id = id;
            c.dist = 0;
            ew[0] = c;
        }
        else
        {
            // Do nothing
        }
    }
}
