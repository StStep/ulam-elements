/**
 * Membrane is a size management element.
 * \color #900
 * \symbol Me
 * \symmetries normal
 *
 * \author R. Stephens Summerlin
 *
 * \license lgpl
 *
 */
element Membrane
{

    // Types
    typedef Nucleus.ID ID;
    typedef Nucleus.Dist Dist;
    typedef EventWindow.SiteNum SiteNum;

    // Utilities
    EventWindow ew;

    // Model Parameters
    /** Membranes not sticky to unknown */
    parameter Bool dieAlone = false;
    /** Membranes less movable by cyto */
    parameter Bool emptyBad = false;

    // Data members
    SiteNum moveDir;

    Void die()
    {
        Empty e;
        ew[0] = e;
    }

    Void dissolve(ID id)
    {
        Cytoplasm c;
        c.id = id;
        c.dist = 0;
        ew[0] = c;
    }

    /**
     * Primary runtime logic
     */
    Void behave()
    {
        // Loop through neighbors
        WindowServices ws;
        ws.reset(1,1);
        Bool badNeig = false;
        Bool goodNeig = false;
        Bool swap = false;
        ID lastId = 0;
        for(Int slot = ws.next(); slot >= 0; slot = ws.next())
        {
            Atom a = ew[(SiteNum) slot];

            // Check for unfriendly neighbors
            if(a is Cytoplasm)
            {
                if(((SiteNum) slot) == moveDir)
                {
                    swap = true;
                }

                Cytoplasm neig = (Cytoplasm) a;
                // First neig with ID
                if(lastId == 0)
                {
                    lastId = neig.id;
                    goodNeig = true;
                }
                else if(lastId != neig.id)
                {
                    badNeig = true;
                }
                else
                {
                    goodNeig = true;
                }
            }
            else if(a is Empty)
            {
                if(emptyBad)
                {
                    badNeig = true;
                }
                if(((SiteNum) slot) == moveDir)
                {
                    swap = true;
                }
            }
            else if(a is Membrane)
            {
                // Do nothing
            }
            else if(a is Nucleus)
            {
                Nucleus neig = (Nucleus) a;
                // First neig with ID
                if(lastId == 0)
                {
                    lastId = neig.id;
                    goodNeig = true;
                }
                else if(lastId != neig.id)
                {
                    badNeig = true;
                }
                else
                {
                    goodNeig = true;
                }
            }
            else
            {
                badNeig = true;
            }
        }

        // Die if no friends
        if(!goodNeig)
        {
            if(dieAlone)
            {
                die();
            }
        }
        // Else disolve if no bad neigbors
        else if(!badNeig)
        {
            dissolve(lastId);
        }
        else if(swap)
        {
            //ew.swap(0, moveDir);
            moveDir = 0;
        }
        else
        {
            // Do nothing
        }
    }
}
