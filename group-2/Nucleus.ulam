/**
 * Nucleus is a size management element.
 * \color #f29
 * \symbol Nu
 * \symmetries normal
 *
 * \author R. Stephens Summerlin
 * \license lgpl
 */
element Nucleus
{
    // Types
    typedef Unsigned(6) ID;
    typedef Unsigned(6) Dist;
    typedef EventWindow.SiteNum SiteNum;
    typedef EventWindow.Symmetry Symmetry;

    // Utilities
    EventWindow ew;

    // Model Parameters
    /**
     * Determines the size
     */
    parameter Dist maxDist = 8;

    // Data members
    ID id = 1;

    /**
     * Primary runtime logic
     */
    Void behave()
    {
        // Loop through neighbors
        WindowServices ws;
        ws.reset(1,1);
        for(Int slot = ws.next(); slot >= 0; slot = ws.next())
        {
            // If Cytoplasm or empty, excite
            Atom a = ew[(SiteNum) slot];
            if((a is Cytoplasm) || (a is Empty))
            {
                Cytoplasm c;
                c.id = id;
                c.dist = maxDist;
                ew[(SiteNum) slot] = c;
            }
            // Else do nothing if unknown
            else
            {
                // Do nothing
            }
        }
    }
}

/**
 * Nucleus ID variation enabler
 * \color #2f2
 * \symbol Nu
 * \symmetries normal
 *
 * \author R. Stephens Summerlin
 * \license lgpl
 */
element NucleusB
{
    // Utilities
    EventWindow ew;

    /**
     * Primary runtime logic
     */
    Void behave()
    {
        Nucleus n;
        n.id = 2;
        ew[0] = n;
    }
}

/**
 * Nucleus ID variation enabler
 * \color #ff2
 * \symbol Nu
 * \symmetries normal
 *
 * \author R. Stephens Summerlin
 * \license lgpl
 */
element NucleusC
{
    // Utilities
    EventWindow ew;

    /**
     * Primary runtime logic
     */
    Void behave()
    {
        Nucleus n;
        n.id = 3;
        ew[0] = n;
    }
}
