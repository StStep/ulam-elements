/**
 * Nucleus is a size management element.
 * \color #f29
 * \symbol Nu
 * \symmetries all
 *
 * \author R. Stephens Summerlin
 * \license lgpl
 */
element Nucleus
{
    // Types
    typedef Unsigned(6) ID;
    typedef Unsigned(6) Dist;
    typedef EventWindow.SiteNum SiteNum;
    typedef EventWindow.Symmetry Symmetry;

    // Utilities
    EventWindow ew;

    // Model Parameters
    /**
     * Determines the size
     */
    parameter Dist maxDist = 8;

    // Data members
    ID id = 1;

    Void die()
    {
        Empty e;
        ew[0] = e;
    }

    /**
     * Primary runtime logic
     */
    Void behave()
    {
        // Loop through neighbors
        WindowServices ws;
        ws.reset(1,1);
        Unsigned(3) memNeig = 0;
        Bool swap = false;
        for(Int slot = 1; slot <= 4; ++slot)
        {
            // If Cytoplasm or empty, excite
            Atom a = ew[(SiteNum) slot];
            if((a is Cytoplasm) || (a is Empty))
            {
                Cytoplasm c;
                c.id = id;
                c.dist = maxDist;
                ew[(SiteNum) slot] = c;
                if(slot == 1)
                {
                    swap = true;
                }
            }
            // Die if unfriendly medium
            else if(a is Membrane)
            {
                ++memNeig;
                Membrane neig = (Membrane) a;
                if(neig.id != id)
                {
                    die();
                }
            }
            // If Nucleus do nothing
            else if(a is Nucleus)
            {
                //Do Nothing
            }
            // Else do nothing if unknown
            else
            {
                // Do nothing
            }
        }

        // Die if surrounded by membrane
        if(memNeig > 3)
        {
            die();
        }
        else if(swap)
        {
           ew.swap(0, 1);
        }
        else
        {
            // Do nothing
        }
    }
}

/**
 * Nucleus ID variation enabler
 * \color #2f2
 * \symbol Nu
 * \symmetries normal
 *
 * \author R. Stephens Summerlin
 * \license lgpl
 */
element NucleusB
{
    // Utilities
    EventWindow ew;

    /**
     * Primary runtime logic
     */
    Void behave()
    {
        Nucleus n;
        n.id = 2;
        ew[0] = n;
    }
}

/**
 * Nucleus ID variation enabler
 * \color #ff2
 * \symbol Nu
 * \symmetries normal
 *
 * \author R. Stephens Summerlin
 * \license lgpl
 */
element NucleusC
{
    // Utilities
    EventWindow ew;

    /**
     * Primary runtime logic
     */
    Void behave()
    {
        Nucleus n;
        n.id = 3;
        ew[0] = n;
    }
}
